State 0:
## Known stack suffix:
##
## LR(1) items:
prog' -> . prog [ # ]
## Transitions:
-- On ID shift to state 1
-- On prog shift to state 41
-- On declarations shift to state 42
-- On decl shift to state 47
## Reductions:
-- On BEGIN
--   reduce production declarations ->

State 1:
## Known stack suffix:
## ID
## LR(1) items:
decl -> ID . ASSIGN expr SEMICOLON [ ID BEGIN ]
## Transitions:
-- On ASSIGN shift to state 2
## Reductions:

State 2:
## Known stack suffix:
## ID ASSIGN
## LR(1) items:
decl -> ID ASSIGN . expr SEMICOLON [ ID BEGIN ]
## Transitions:
-- On PLUS shift to state 3
-- On MINUS shift to state 4
-- On LPAREN shift to state 5
-- On IF shift to state 6
-- On ID shift to state 9
-- On CSTE shift to state 10
-- On expr shift to state 39
## Reductions:

State 3:
## Known stack suffix:
## PLUS
## LR(1) items:
expr -> PLUS . expr [ TIMES THEN SEMICOLON RPAREN RELOP PLUS OR MINUS END ELSE DIV AND ]
## Transitions:
-- On PLUS shift to state 3
-- On MINUS shift to state 4
-- On LPAREN shift to state 5
-- On IF shift to state 6
-- On ID shift to state 9
-- On CSTE shift to state 10
-- On expr shift to state 38
## Reductions:

State 4:
## Known stack suffix:
## MINUS
## LR(1) items:
expr -> MINUS . expr [ TIMES THEN SEMICOLON RPAREN RELOP PLUS OR MINUS END ELSE DIV AND ]
## Transitions:
-- On PLUS shift to state 3
-- On MINUS shift to state 4
-- On LPAREN shift to state 5
-- On IF shift to state 6
-- On ID shift to state 9
-- On CSTE shift to state 10
-- On expr shift to state 37
## Reductions:

State 5:
## Known stack suffix:
## LPAREN
## LR(1) items:
expr -> LPAREN . expr RPAREN [ TIMES THEN SEMICOLON RPAREN RELOP PLUS OR MINUS END ELSE DIV AND ]
## Transitions:
-- On PLUS shift to state 3
-- On MINUS shift to state 4
-- On LPAREN shift to state 5
-- On IF shift to state 6
-- On ID shift to state 9
-- On CSTE shift to state 10
-- On expr shift to state 36
## Reductions:

State 6:
## Known stack suffix:
## IF
## LR(1) items:
expr -> IF . cond THEN expr ELSE expr [ TIMES THEN SEMICOLON RPAREN RELOP PLUS OR MINUS END ELSE DIV AND ]
## Transitions:
-- On PLUS shift to state 3
-- On NOT shift to state 7
-- On MINUS shift to state 4
-- On LPAREN shift to state 8
-- On IF shift to state 6
-- On ID shift to state 9
-- On CSTE shift to state 10
-- On expr shift to state 26
-- On cond shift to state 31
## Reductions:

State 7:
## Known stack suffix:
## NOT
## LR(1) items:
cond -> NOT . cond [ THEN RPAREN OR AND ]
## Transitions:
-- On PLUS shift to state 3
-- On NOT shift to state 7
-- On MINUS shift to state 4
-- On LPAREN shift to state 8
-- On IF shift to state 6
-- On ID shift to state 9
-- On CSTE shift to state 10
-- On expr shift to state 26
-- On cond shift to state 30
## Reductions:

State 8:
## Known stack suffix:
## LPAREN
## LR(1) items:
cond -> LPAREN . cond RPAREN [ THEN RPAREN OR AND ]
expr -> LPAREN . expr RPAREN [ TIMES RPAREN RELOP PLUS MINUS DIV ]
## Transitions:
-- On PLUS shift to state 3
-- On NOT shift to state 7
-- On MINUS shift to state 4
-- On LPAREN shift to state 8
-- On IF shift to state 6
-- On ID shift to state 9
-- On CSTE shift to state 10
-- On expr shift to state 11
-- On cond shift to state 23
## Reductions:

State 9:
## Known stack suffix:
## ID
## LR(1) items:
expr -> ID . [ TIMES THEN SEMICOLON RPAREN RELOP PLUS OR MINUS END ELSE DIV AND ]
## Transitions:
## Reductions:
-- On TIMES THEN SEMICOLON RPAREN RELOP PLUS OR MINUS END ELSE DIV AND
--   reduce production expr -> ID

State 10:
## Known stack suffix:
## CSTE
## LR(1) items:
expr -> CSTE . [ TIMES THEN SEMICOLON RPAREN RELOP PLUS OR MINUS END ELSE DIV AND ]
## Transitions:
## Reductions:
-- On TIMES THEN SEMICOLON RPAREN RELOP PLUS OR MINUS END ELSE DIV AND
--   reduce production expr -> CSTE

State 11:
## Known stack suffix:
## LPAREN expr
## LR(1) items:
cond -> expr . RELOP expr [ RPAREN OR AND ]
expr -> expr . PLUS expr [ TIMES RPAREN RELOP PLUS MINUS DIV ]
expr -> expr . TIMES expr [ TIMES RPAREN RELOP PLUS MINUS DIV ]
expr -> expr . MINUS expr [ TIMES RPAREN RELOP PLUS MINUS DIV ]
expr -> expr . DIV expr [ TIMES RPAREN RELOP PLUS MINUS DIV ]
expr -> LPAREN expr . RPAREN [ TIMES RPAREN RELOP PLUS MINUS DIV ]
## Transitions:
-- On TIMES shift to state 12
-- On RPAREN shift to state 14
-- On RELOP shift to state 15
-- On PLUS shift to state 17
-- On MINUS shift to state 21
-- On DIV shift to state 19
## Reductions:

State 12:
## Known stack suffix:
## expr TIMES
## LR(1) items:
expr -> expr TIMES . expr [ TIMES THEN SEMICOLON RPAREN RELOP PLUS OR MINUS END ELSE DIV AND ]
## Transitions:
-- On PLUS shift to state 3
-- On MINUS shift to state 4
-- On LPAREN shift to state 5
-- On IF shift to state 6
-- On ID shift to state 9
-- On CSTE shift to state 10
-- On expr shift to state 13
## Reductions:

State 13:
## Known stack suffix:
## expr TIMES expr
## LR(1) items:
expr -> expr . PLUS expr [ TIMES THEN SEMICOLON RPAREN RELOP PLUS OR MINUS END ELSE DIV AND ]
expr -> expr . TIMES expr [ TIMES THEN SEMICOLON RPAREN RELOP PLUS OR MINUS END ELSE DIV AND ]
expr -> expr TIMES expr . [ TIMES THEN SEMICOLON RPAREN RELOP PLUS OR MINUS END ELSE DIV AND ]
expr -> expr . MINUS expr [ TIMES THEN SEMICOLON RPAREN RELOP PLUS OR MINUS END ELSE DIV AND ]
expr -> expr . DIV expr [ TIMES THEN SEMICOLON RPAREN RELOP PLUS OR MINUS END ELSE DIV AND ]
## Transitions:
## Reductions:
-- On TIMES THEN SEMICOLON RPAREN RELOP PLUS OR MINUS END ELSE DIV AND
--   reduce production expr -> expr TIMES expr

State 14:
## Known stack suffix:
## LPAREN expr RPAREN
## LR(1) items:
expr -> LPAREN expr RPAREN . [ TIMES THEN SEMICOLON RPAREN RELOP PLUS OR MINUS END ELSE DIV AND ]
## Transitions:
## Reductions:
-- On TIMES THEN SEMICOLON RPAREN RELOP PLUS OR MINUS END ELSE DIV AND
--   reduce production expr -> LPAREN expr RPAREN

State 15:
## Known stack suffix:
## expr RELOP
## LR(1) items:
cond -> expr RELOP . expr [ THEN RPAREN OR AND ]
## Transitions:
-- On PLUS shift to state 3
-- On MINUS shift to state 4
-- On LPAREN shift to state 5
-- On IF shift to state 6
-- On ID shift to state 9
-- On CSTE shift to state 10
-- On expr shift to state 16
## Reductions:

State 16:
## Known stack suffix:
## expr RELOP expr
## LR(1) items:
cond -> expr RELOP expr . [ THEN RPAREN OR AND ]
expr -> expr . PLUS expr [ TIMES THEN RPAREN PLUS OR MINUS DIV AND ]
expr -> expr . TIMES expr [ TIMES THEN RPAREN PLUS OR MINUS DIV AND ]
expr -> expr . MINUS expr [ TIMES THEN RPAREN PLUS OR MINUS DIV AND ]
expr -> expr . DIV expr [ TIMES THEN RPAREN PLUS OR MINUS DIV AND ]
## Transitions:
-- On TIMES shift to state 12
-- On PLUS shift to state 17
-- On MINUS shift to state 21
-- On DIV shift to state 19
## Reductions:
-- On THEN RPAREN OR AND
--   reduce production cond -> expr RELOP expr

State 17:
## Known stack suffix:
## expr PLUS
## LR(1) items:
expr -> expr PLUS . expr [ TIMES THEN SEMICOLON RPAREN RELOP PLUS OR MINUS END ELSE DIV AND ]
## Transitions:
-- On PLUS shift to state 3
-- On MINUS shift to state 4
-- On LPAREN shift to state 5
-- On IF shift to state 6
-- On ID shift to state 9
-- On CSTE shift to state 10
-- On expr shift to state 18
## Reductions:

State 18:
## Known stack suffix:
## expr PLUS expr
## LR(1) items:
expr -> expr . PLUS expr [ TIMES THEN SEMICOLON RPAREN RELOP PLUS OR MINUS END ELSE DIV AND ]
expr -> expr PLUS expr . [ TIMES THEN SEMICOLON RPAREN RELOP PLUS OR MINUS END ELSE DIV AND ]
expr -> expr . TIMES expr [ TIMES THEN SEMICOLON RPAREN RELOP PLUS OR MINUS END ELSE DIV AND ]
expr -> expr . MINUS expr [ TIMES THEN SEMICOLON RPAREN RELOP PLUS OR MINUS END ELSE DIV AND ]
expr -> expr . DIV expr [ TIMES THEN SEMICOLON RPAREN RELOP PLUS OR MINUS END ELSE DIV AND ]
## Transitions:
-- On TIMES shift to state 12
-- On DIV shift to state 19
## Reductions:
-- On THEN SEMICOLON RPAREN RELOP PLUS OR MINUS END ELSE AND
--   reduce production expr -> expr PLUS expr

State 19:
## Known stack suffix:
## expr DIV
## LR(1) items:
expr -> expr DIV . expr [ TIMES THEN SEMICOLON RPAREN RELOP PLUS OR MINUS END ELSE DIV AND ]
## Transitions:
-- On PLUS shift to state 3
-- On MINUS shift to state 4
-- On LPAREN shift to state 5
-- On IF shift to state 6
-- On ID shift to state 9
-- On CSTE shift to state 10
-- On expr shift to state 20
## Reductions:

State 20:
## Known stack suffix:
## expr DIV expr
## LR(1) items:
expr -> expr . PLUS expr [ TIMES THEN SEMICOLON RPAREN RELOP PLUS OR MINUS END ELSE DIV AND ]
expr -> expr . TIMES expr [ TIMES THEN SEMICOLON RPAREN RELOP PLUS OR MINUS END ELSE DIV AND ]
expr -> expr . MINUS expr [ TIMES THEN SEMICOLON RPAREN RELOP PLUS OR MINUS END ELSE DIV AND ]
expr -> expr . DIV expr [ TIMES THEN SEMICOLON RPAREN RELOP PLUS OR MINUS END ELSE DIV AND ]
expr -> expr DIV expr . [ TIMES THEN SEMICOLON RPAREN RELOP PLUS OR MINUS END ELSE DIV AND ]
## Transitions:
## Reductions:
-- On TIMES THEN SEMICOLON RPAREN RELOP PLUS OR MINUS END ELSE DIV AND
--   reduce production expr -> expr DIV expr

State 21:
## Known stack suffix:
## expr MINUS
## LR(1) items:
expr -> expr MINUS . expr [ TIMES THEN SEMICOLON RPAREN RELOP PLUS OR MINUS END ELSE DIV AND ]
## Transitions:
-- On PLUS shift to state 3
-- On MINUS shift to state 4
-- On LPAREN shift to state 5
-- On IF shift to state 6
-- On ID shift to state 9
-- On CSTE shift to state 10
-- On expr shift to state 22
## Reductions:

State 22:
## Known stack suffix:
## expr MINUS expr
## LR(1) items:
expr -> expr . PLUS expr [ TIMES THEN SEMICOLON RPAREN RELOP PLUS OR MINUS END ELSE DIV AND ]
expr -> expr . TIMES expr [ TIMES THEN SEMICOLON RPAREN RELOP PLUS OR MINUS END ELSE DIV AND ]
expr -> expr . MINUS expr [ TIMES THEN SEMICOLON RPAREN RELOP PLUS OR MINUS END ELSE DIV AND ]
expr -> expr MINUS expr . [ TIMES THEN SEMICOLON RPAREN RELOP PLUS OR MINUS END ELSE DIV AND ]
expr -> expr . DIV expr [ TIMES THEN SEMICOLON RPAREN RELOP PLUS OR MINUS END ELSE DIV AND ]
## Transitions:
-- On TIMES shift to state 12
-- On DIV shift to state 19
## Reductions:
-- On THEN SEMICOLON RPAREN RELOP PLUS OR MINUS END ELSE AND
--   reduce production expr -> expr MINUS expr

State 23:
## Known stack suffix:
## LPAREN cond
## LR(1) items:
cond -> cond . AND cond [ RPAREN OR AND ]
cond -> cond . OR cond [ RPAREN OR AND ]
cond -> LPAREN cond . RPAREN [ THEN RPAREN OR AND ]
## Transitions:
-- On RPAREN shift to state 24
-- On OR shift to state 25
-- On AND shift to state 28
## Reductions:

State 24:
## Known stack suffix:
## LPAREN cond RPAREN
## LR(1) items:
cond -> LPAREN cond RPAREN . [ THEN RPAREN OR AND ]
## Transitions:
## Reductions:
-- On THEN RPAREN OR AND
--   reduce production cond -> LPAREN cond RPAREN

State 25:
## Known stack suffix:
## cond OR
## LR(1) items:
cond -> cond OR . cond [ THEN RPAREN OR AND ]
## Transitions:
-- On PLUS shift to state 3
-- On NOT shift to state 7
-- On MINUS shift to state 4
-- On LPAREN shift to state 8
-- On IF shift to state 6
-- On ID shift to state 9
-- On CSTE shift to state 10
-- On expr shift to state 26
-- On cond shift to state 27
## Reductions:

State 26:
## Known stack suffix:
## expr
## LR(1) items:
cond -> expr . RELOP expr [ THEN RPAREN OR AND ]
expr -> expr . PLUS expr [ TIMES RELOP PLUS MINUS DIV ]
expr -> expr . TIMES expr [ TIMES RELOP PLUS MINUS DIV ]
expr -> expr . MINUS expr [ TIMES RELOP PLUS MINUS DIV ]
expr -> expr . DIV expr [ TIMES RELOP PLUS MINUS DIV ]
## Transitions:
-- On TIMES shift to state 12
-- On RELOP shift to state 15
-- On PLUS shift to state 17
-- On MINUS shift to state 21
-- On DIV shift to state 19
## Reductions:

State 27:
## Known stack suffix:
## cond OR cond
## LR(1) items:
cond -> cond . AND cond [ THEN RPAREN OR AND ]
cond -> cond . OR cond [ THEN RPAREN OR AND ]
cond -> cond OR cond . [ THEN RPAREN OR AND ]
## Transitions:
-- On AND shift to state 28
## Reductions:
-- On THEN RPAREN OR
--   reduce production cond -> cond OR cond

State 28:
## Known stack suffix:
## cond AND
## LR(1) items:
cond -> cond AND . cond [ THEN RPAREN OR AND ]
## Transitions:
-- On PLUS shift to state 3
-- On NOT shift to state 7
-- On MINUS shift to state 4
-- On LPAREN shift to state 8
-- On IF shift to state 6
-- On ID shift to state 9
-- On CSTE shift to state 10
-- On expr shift to state 26
-- On cond shift to state 29
## Reductions:

State 29:
## Known stack suffix:
## cond AND cond
## LR(1) items:
cond -> cond . AND cond [ THEN RPAREN OR AND ]
cond -> cond AND cond . [ THEN RPAREN OR AND ]
cond -> cond . OR cond [ THEN RPAREN OR AND ]
## Transitions:
## Reductions:
-- On THEN RPAREN OR AND
--   reduce production cond -> cond AND cond

State 30:
## Known stack suffix:
## NOT cond
## LR(1) items:
cond -> cond . AND cond [ THEN RPAREN OR AND ]
cond -> cond . OR cond [ THEN RPAREN OR AND ]
cond -> NOT cond . [ THEN RPAREN OR AND ]
## Transitions:
## Reductions:
-- On THEN RPAREN OR AND
--   reduce production cond -> NOT cond

State 31:
## Known stack suffix:
## IF cond
## LR(1) items:
cond -> cond . AND cond [ THEN OR AND ]
cond -> cond . OR cond [ THEN OR AND ]
expr -> IF cond . THEN expr ELSE expr [ TIMES THEN SEMICOLON RPAREN RELOP PLUS OR MINUS END ELSE DIV AND ]
## Transitions:
-- On THEN shift to state 32
-- On OR shift to state 25
-- On AND shift to state 28
## Reductions:

State 32:
## Known stack suffix:
## IF cond THEN
## LR(1) items:
expr -> IF cond THEN . expr ELSE expr [ TIMES THEN SEMICOLON RPAREN RELOP PLUS OR MINUS END ELSE DIV AND ]
## Transitions:
-- On PLUS shift to state 3
-- On MINUS shift to state 4
-- On LPAREN shift to state 5
-- On IF shift to state 6
-- On ID shift to state 9
-- On CSTE shift to state 10
-- On expr shift to state 33
## Reductions:

State 33:
## Known stack suffix:
## IF cond THEN expr
## LR(1) items:
expr -> expr . PLUS expr [ TIMES PLUS MINUS ELSE DIV ]
expr -> expr . TIMES expr [ TIMES PLUS MINUS ELSE DIV ]
expr -> expr . MINUS expr [ TIMES PLUS MINUS ELSE DIV ]
expr -> expr . DIV expr [ TIMES PLUS MINUS ELSE DIV ]
expr -> IF cond THEN expr . ELSE expr [ TIMES THEN SEMICOLON RPAREN RELOP PLUS OR MINUS END ELSE DIV AND ]
## Transitions:
-- On TIMES shift to state 12
-- On PLUS shift to state 17
-- On MINUS shift to state 21
-- On ELSE shift to state 34
-- On DIV shift to state 19
## Reductions:

State 34:
## Known stack suffix:
## IF cond THEN expr ELSE
## LR(1) items:
expr -> IF cond THEN expr ELSE . expr [ TIMES THEN SEMICOLON RPAREN RELOP PLUS OR MINUS END ELSE DIV AND ]
## Transitions:
-- On PLUS shift to state 3
-- On MINUS shift to state 4
-- On LPAREN shift to state 5
-- On IF shift to state 6
-- On ID shift to state 9
-- On CSTE shift to state 10
-- On expr shift to state 35
## Reductions:

State 35:
## Known stack suffix:
## IF cond THEN expr ELSE expr
## LR(1) items:
expr -> expr . PLUS expr [ TIMES THEN SEMICOLON RPAREN RELOP PLUS OR MINUS END ELSE DIV AND ]
expr -> expr . TIMES expr [ TIMES THEN SEMICOLON RPAREN RELOP PLUS OR MINUS END ELSE DIV AND ]
expr -> expr . MINUS expr [ TIMES THEN SEMICOLON RPAREN RELOP PLUS OR MINUS END ELSE DIV AND ]
expr -> expr . DIV expr [ TIMES THEN SEMICOLON RPAREN RELOP PLUS OR MINUS END ELSE DIV AND ]
expr -> IF cond THEN expr ELSE expr . [ TIMES THEN SEMICOLON RPAREN RELOP PLUS OR MINUS END ELSE DIV AND ]
## Transitions:
-- On TIMES shift to state 12
-- On PLUS shift to state 17
-- On MINUS shift to state 21
-- On DIV shift to state 19
## Reductions:
-- On THEN SEMICOLON RPAREN RELOP OR END ELSE AND
--   reduce production expr -> IF cond THEN expr ELSE expr

State 36:
## Known stack suffix:
## LPAREN expr
## LR(1) items:
expr -> expr . PLUS expr [ TIMES RPAREN PLUS MINUS DIV ]
expr -> expr . TIMES expr [ TIMES RPAREN PLUS MINUS DIV ]
expr -> expr . MINUS expr [ TIMES RPAREN PLUS MINUS DIV ]
expr -> expr . DIV expr [ TIMES RPAREN PLUS MINUS DIV ]
expr -> LPAREN expr . RPAREN [ TIMES THEN SEMICOLON RPAREN RELOP PLUS OR MINUS END ELSE DIV AND ]
## Transitions:
-- On TIMES shift to state 12
-- On RPAREN shift to state 14
-- On PLUS shift to state 17
-- On MINUS shift to state 21
-- On DIV shift to state 19
## Reductions:

State 37:
## Known stack suffix:
## MINUS expr
## LR(1) items:
expr -> expr . PLUS expr [ TIMES THEN SEMICOLON RPAREN RELOP PLUS OR MINUS END ELSE DIV AND ]
expr -> expr . TIMES expr [ TIMES THEN SEMICOLON RPAREN RELOP PLUS OR MINUS END ELSE DIV AND ]
expr -> expr . MINUS expr [ TIMES THEN SEMICOLON RPAREN RELOP PLUS OR MINUS END ELSE DIV AND ]
expr -> expr . DIV expr [ TIMES THEN SEMICOLON RPAREN RELOP PLUS OR MINUS END ELSE DIV AND ]
expr -> MINUS expr . [ TIMES THEN SEMICOLON RPAREN RELOP PLUS OR MINUS END ELSE DIV AND ]
## Transitions:
## Reductions:
-- On TIMES THEN SEMICOLON RPAREN RELOP PLUS OR MINUS END ELSE DIV AND
--   reduce production expr -> MINUS expr

State 38:
## Known stack suffix:
## PLUS expr
## LR(1) items:
expr -> expr . PLUS expr [ TIMES THEN SEMICOLON RPAREN RELOP PLUS OR MINUS END ELSE DIV AND ]
expr -> expr . TIMES expr [ TIMES THEN SEMICOLON RPAREN RELOP PLUS OR MINUS END ELSE DIV AND ]
expr -> expr . MINUS expr [ TIMES THEN SEMICOLON RPAREN RELOP PLUS OR MINUS END ELSE DIV AND ]
expr -> expr . DIV expr [ TIMES THEN SEMICOLON RPAREN RELOP PLUS OR MINUS END ELSE DIV AND ]
expr -> PLUS expr . [ TIMES THEN SEMICOLON RPAREN RELOP PLUS OR MINUS END ELSE DIV AND ]
## Transitions:
## Reductions:
-- On TIMES THEN SEMICOLON RPAREN RELOP PLUS OR MINUS END ELSE DIV AND
--   reduce production expr -> PLUS expr

State 39:
## Known stack suffix:
## ID ASSIGN expr
## LR(1) items:
decl -> ID ASSIGN expr . SEMICOLON [ ID BEGIN ]
expr -> expr . PLUS expr [ TIMES SEMICOLON PLUS MINUS DIV ]
expr -> expr . TIMES expr [ TIMES SEMICOLON PLUS MINUS DIV ]
expr -> expr . MINUS expr [ TIMES SEMICOLON PLUS MINUS DIV ]
expr -> expr . DIV expr [ TIMES SEMICOLON PLUS MINUS DIV ]
## Transitions:
-- On TIMES shift to state 12
-- On SEMICOLON shift to state 40
-- On PLUS shift to state 17
-- On MINUS shift to state 21
-- On DIV shift to state 19
## Reductions:

State 40:
## Known stack suffix:
## ID ASSIGN expr SEMICOLON
## LR(1) items:
decl -> ID ASSIGN expr SEMICOLON . [ ID BEGIN ]
## Transitions:
## Reductions:
-- On ID BEGIN
--   reduce production decl -> ID ASSIGN expr SEMICOLON

State 41:
## Known stack suffix:
## prog
## LR(1) items:
prog' -> prog . [ # ]
## Transitions:
## Reductions:
-- On #
--   accept prog

State 42:
## Known stack suffix:
## declarations
## LR(1) items:
prog -> declarations . BEGIN expr END EOF [ # ]
## Transitions:
-- On BEGIN shift to state 43
## Reductions:

State 43:
## Known stack suffix:
## declarations BEGIN
## LR(1) items:
prog -> declarations BEGIN . expr END EOF [ # ]
## Transitions:
-- On PLUS shift to state 3
-- On MINUS shift to state 4
-- On LPAREN shift to state 5
-- On IF shift to state 6
-- On ID shift to state 9
-- On CSTE shift to state 10
-- On expr shift to state 44
## Reductions:

State 44:
## Known stack suffix:
## declarations BEGIN expr
## LR(1) items:
expr -> expr . PLUS expr [ TIMES PLUS MINUS END DIV ]
expr -> expr . TIMES expr [ TIMES PLUS MINUS END DIV ]
expr -> expr . MINUS expr [ TIMES PLUS MINUS END DIV ]
expr -> expr . DIV expr [ TIMES PLUS MINUS END DIV ]
prog -> declarations BEGIN expr . END EOF [ # ]
## Transitions:
-- On TIMES shift to state 12
-- On PLUS shift to state 17
-- On MINUS shift to state 21
-- On END shift to state 45
-- On DIV shift to state 19
## Reductions:

State 45:
## Known stack suffix:
## declarations BEGIN expr END
## LR(1) items:
prog -> declarations BEGIN expr END . EOF [ # ]
## Transitions:
-- On EOF shift to state 46
## Reductions:

State 46:
## Known stack suffix:
## declarations BEGIN expr END EOF
## LR(1) items:
prog -> declarations BEGIN expr END EOF . [ # ]
## Transitions:
## Reductions:
-- On #
--   reduce production prog -> declarations BEGIN expr END EOF

State 47:
## Known stack suffix:
## decl
## LR(1) items:
declarations -> decl . declarations [ BEGIN ]
## Transitions:
-- On ID shift to state 1
-- On declarations shift to state 48
-- On decl shift to state 47
## Reductions:
-- On BEGIN
--   reduce production declarations ->

State 48:
## Known stack suffix:
## decl declarations
## LR(1) items:
declarations -> decl declarations . [ BEGIN ]
## Transitions:
## Reductions:
-- On BEGIN
--   reduce production declarations -> decl declarations


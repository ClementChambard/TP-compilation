# 1 "tpLex.mll"
 
open Ast
open TpParse
open Lexing
exception Eof

(* gere les positions numero de ligne + decalage dans la ligne *)
let next_line lexbuf = Lexing.new_line lexbuf

(* Potentiellement utile pour distinguer mots-clef et vrais identificateurs *)
let keyword_table = Hashtbl.create 16

let _ =
    List.iter (fun (kwd, tok) -> Hashtbl.add keyword_table kwd tok)
      [ "begin", BEGIN;
        "end", END;
        "if", IF;
        "then", THEN;
        "else", ELSE;
        "not", NOT;
        "and", AND;
        "or", OR
      ]


# 28 "tpLex.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base =
   "\000\000\232\255\233\255\234\255\001\000\001\000\237\255\238\255\
    \239\255\002\000\242\255\003\000\030\000\248\255\249\255\250\255\
    \078\000\002\000\253\255\254\255\088\000\252\255\241\255\245\255\
    \243\255\240\255\236\255\235\255\004\000\253\255\254\255\046\000\
    \255\255";
  Lexing.lex_backtrk =
   "\255\255\255\255\255\255\255\255\023\000\023\000\255\255\255\255\
    \255\255\023\000\255\255\011\000\009\000\255\255\255\255\255\255\
    \004\000\008\000\255\255\255\255\000\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\002\000\
    \255\255";
  Lexing.lex_default =
   "\001\000\000\000\000\000\000\000\255\255\255\255\000\000\000\000\
    \000\000\255\255\000\000\255\255\255\255\000\000\000\000\000\000\
    \255\255\255\255\000\000\000\000\255\255\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\029\000\000\000\000\000\255\255\
    \000\000";
  Lexing.lex_trans =
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\019\000\018\000\000\000\000\000\019\000\030\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \019\000\003\000\000\000\000\000\000\000\000\000\005\000\026\000\
    \008\000\007\000\013\000\015\000\021\000\014\000\031\000\017\000\
    \016\000\016\000\016\000\016\000\016\000\016\000\016\000\016\000\
    \016\000\016\000\009\000\006\000\012\000\010\000\011\000\025\000\
    \024\000\020\000\020\000\020\000\020\000\020\000\020\000\020\000\
    \020\000\020\000\020\000\020\000\020\000\020\000\020\000\020\000\
    \020\000\020\000\020\000\020\000\020\000\020\000\020\000\020\000\
    \020\000\020\000\020\000\023\000\022\000\032\000\000\000\000\000\
    \000\000\020\000\020\000\020\000\020\000\020\000\020\000\020\000\
    \020\000\020\000\020\000\020\000\020\000\020\000\020\000\020\000\
    \020\000\020\000\020\000\020\000\020\000\020\000\020\000\020\000\
    \020\000\020\000\020\000\000\000\004\000\027\000\016\000\016\000\
    \016\000\016\000\016\000\016\000\016\000\016\000\016\000\016\000\
    \020\000\020\000\020\000\020\000\020\000\020\000\020\000\020\000\
    \020\000\020\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\020\000\020\000\020\000\020\000\020\000\020\000\020\000\
    \020\000\020\000\020\000\020\000\020\000\020\000\020\000\020\000\
    \020\000\020\000\020\000\020\000\020\000\020\000\020\000\020\000\
    \020\000\020\000\020\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\020\000\020\000\020\000\020\000\020\000\020\000\020\000\
    \020\000\020\000\020\000\020\000\020\000\020\000\020\000\020\000\
    \020\000\020\000\020\000\020\000\020\000\020\000\020\000\020\000\
    \020\000\020\000\020\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \002\000\000\000\000\000\000\000\255\255\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000";
  Lexing.lex_check =
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\255\255\255\255\000\000\028\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\000\000\255\255\255\255\255\255\255\255\000\000\005\000\
    \000\000\000\000\000\000\000\000\017\000\000\000\028\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\009\000\
    \011\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\012\000\012\000\031\000\255\255\255\255\
    \255\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\255\255\000\000\004\000\016\000\016\000\
    \016\000\016\000\016\000\016\000\016\000\016\000\016\000\016\000\
    \020\000\020\000\020\000\020\000\020\000\020\000\020\000\020\000\
    \020\000\020\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\020\000\020\000\020\000\020\000\020\000\020\000\020\000\
    \020\000\020\000\020\000\020\000\020\000\020\000\020\000\020\000\
    \020\000\020\000\020\000\020\000\020\000\020\000\020\000\020\000\
    \020\000\020\000\020\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\020\000\020\000\020\000\020\000\020\000\020\000\020\000\
    \020\000\020\000\020\000\020\000\020\000\020\000\020\000\020\000\
    \020\000\020\000\020\000\020\000\020\000\020\000\020\000\020\000\
    \020\000\020\000\020\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\255\255\255\255\255\255\028\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255";
  Lexing.lex_base_code =
   "";
  Lexing.lex_backtrk_code =
   "";
  Lexing.lex_default_code =
   "";
  Lexing.lex_trans_code =
   "";
  Lexing.lex_check_code =
   "";
  Lexing.lex_code =
   "";
}

let rec token lexbuf =
   __ocaml_lex_token_rec lexbuf 0
and __ocaml_lex_token_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
let
# 40 "tpLex.mll"
                  id
# 160 "tpLex.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 40 "tpLex.mll"
                         ( try Hashtbl.find keyword_table id with Not_found -> ID id )
# 164 "tpLex.ml"

  | 1 ->
# 41 "tpLex.mll"
                         ( token lexbuf )
# 169 "tpLex.ml"

  | 2 ->
# 42 "tpLex.mll"
                         ( next_line lexbuf; token lexbuf)
# 174 "tpLex.ml"

  | 3 ->
# 43 "tpLex.mll"
                         (
                            (* lance la fonction specialisÃ©e dans la
                             * reconnaissance des commentaires
                             *)
                            comment lexbuf
                         )
# 184 "tpLex.ml"

  | 4 ->
let
# 52 "tpLex.mll"
                lxm
# 190 "tpLex.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 52 "tpLex.mll"
                         ( CSTE(int_of_string lxm) )
# 194 "tpLex.ml"

  | 5 ->
# 53 "tpLex.mll"
                         ( PLUS )
# 199 "tpLex.ml"

  | 6 ->
# 54 "tpLex.mll"
                         ( MINUS )
# 204 "tpLex.ml"

  | 7 ->
# 55 "tpLex.mll"
                         ( TIMES )
# 209 "tpLex.ml"

  | 8 ->
# 56 "tpLex.mll"
                         ( DIV )
# 214 "tpLex.ml"

  | 9 ->
# 57 "tpLex.mll"
                         ( RELOP (Ast.Lt) )
# 219 "tpLex.ml"

  | 10 ->
# 58 "tpLex.mll"
                         ( RELOP (Ast.Le) )
# 224 "tpLex.ml"

  | 11 ->
# 59 "tpLex.mll"
                         ( RELOP (Ast.Gt) )
# 229 "tpLex.ml"

  | 12 ->
# 60 "tpLex.mll"
                         ( RELOP (Ast.Ge) )
# 234 "tpLex.ml"

  | 13 ->
# 61 "tpLex.mll"
                         ( RELOP (Ast.Eq) )
# 239 "tpLex.ml"

  | 14 ->
# 62 "tpLex.mll"
                         ( RELOP (Ast.Neq) )
# 244 "tpLex.ml"

  | 15 ->
# 63 "tpLex.mll"
                         ( ASSIGN )
# 249 "tpLex.ml"

  | 16 ->
# 64 "tpLex.mll"
                         ( LPAREN )
# 254 "tpLex.ml"

  | 17 ->
# 65 "tpLex.mll"
                         ( RPAREN )
# 259 "tpLex.ml"

  | 18 ->
# 66 "tpLex.mll"
                         ( SEMICOLON )
# 264 "tpLex.ml"

  | 19 ->
# 67 "tpLex.mll"
                         ( AND )
# 269 "tpLex.ml"

  | 20 ->
# 68 "tpLex.mll"
                         ( OR  )
# 274 "tpLex.ml"

  | 21 ->
# 69 "tpLex.mll"
                         ( NOT )
# 279 "tpLex.ml"

  | 22 ->
# 70 "tpLex.mll"
                         ( EOF )
# 284 "tpLex.ml"

  | 23 ->
let
# 71 "tpLex.mll"
         lxm
# 290 "tpLex.ml"
= Lexing.sub_lexeme_char lexbuf lexbuf.Lexing.lex_start_pos in
# 71 "tpLex.mll"
                         ( (* On met un message et on essaye de scanner la
                            * suite. pour dÃ©tecter le plus d'erreurs possibles
                            * d'un coup. Il faudrait probablement mÃ©moriser
                            * qu'on a rencontrÃ© une erreur pour signaler Ã  la
                            * fin que le programme Ã©tait incorrect.
                            *)
             		   print_endline
                             ("undefined character: " ^ (String.make 1 lxm));
                           token lexbuf
           	         )
# 303 "tpLex.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_token_rec lexbuf __ocaml_lex_state

and comment lexbuf =
   __ocaml_lex_comment_rec lexbuf 28
and __ocaml_lex_comment_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 86 "tpLex.mll"
                  ( (* quand on a reconnu la fin du commentaire, on relance
                     * recursivement l'analyseur lexical pour renvoyer le
                     * prochain token Ã  l'analyseur syntaxique puisqu'on ne
                     * transmet pas les commentaires
                     *)
                     token lexbuf
                  )
# 321 "tpLex.ml"

  | 1 ->
# 93 "tpLex.mll"
                  ( new_line lexbuf; comment lexbuf )
# 326 "tpLex.ml"

  | 2 ->
# 94 "tpLex.mll"
                  ( comment lexbuf )
# 331 "tpLex.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_comment_rec lexbuf __ocaml_lex_state

;;

